generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
    // directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Category {
    id   Int    @id @default(autoincrement())
    name String @unique

    products Product[]
}

model User {
    id         Int      @id @default(autoincrement())
    fullName   String
    email      String   @unique
    password   String
    role       UserRole @default(USER)
    createdAt  DateTime @default(now())
    updateAt   DateTime @updatedAt
    provider   String?
    providerId String?
    verified   DateTime

    cart             Cart?
    Order            Order[]
    verificationCode VerificationCode?
}

model Product {
    id        Int      @id @default(autoincrement())
    name      String
    imageUrl  String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    category   Category? @relation(fields: [categoryId], references: [id])
    categoryId Int?

    ingredients Ingredient[]
    productItem ProductItem[]
}

model ProductItem {
    id        Int  @id @default(autoincrement())
    price     Int
    size      Int?
    pizzaType Int?

    product   Product    @relation(fields: [productId], references: [id])
    productId Int
    cartItem  CartItem[]
}

model Ingredient {
    id        Int      @id @default(autoincrement())
    name      String
    price     Int
    imageUrl  String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    products   Product[]
    cartItem   CartItem[]
    cartItemId Int?
}

model Cart {
    id          Int      @id @default(autoincrement())
    totalAmount Int      @default(0)
    createdAt   DateTime @default(now())
    updateAt    DateTime @updatedAt

    token String

    user   User? @relation(fields: [userId], references: [id])
    userId Int?  @unique

    cartItem CartItem[]
}

model CartItem {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    productItem   ProductItem @relation(fields: [productItemId], references: [id])
    productItemId Int
    cart          Cart        @relation(fields: [cartId], references: [id])
    cartId        Int

    quantity    Int
    ingredients Ingredient[]
}

model Order {
    id          Int      @id @default(autoincrement())
    totalAmount Int
    status      Status
    paymendId   String?
    items       Json
    fullName    String
    address     String
    email       String
    phone       String
    comments    String
    createdAt   DateTime @default(now())
    updateAt    DateTime @updatedAt

    token String?

    user   User? @relation(fields: [userId], references: [id])
    userId Int?
}

model VerificationCode {
    id        Int      @id @default(autoincrement())
    code      String
    createdAt DateTime @default(now())

    user   User @relation(fields: [userId], references: [id])
    userId Int  @unique

    @@unique([userId, code])
}

enum Status {
    PENDING
    SUCCESSED
    CANCELLED
}

enum UserRole {
    ADMIN
    USER
}
